CREATE TABLE users (
    user_id INT AUTO_INCREMENT PRIMARY KEY,
    username VARCHAR(100) UNIQUE NOT NULL,
    password VARCHAR(255) NOT NULL,
    role ENUM('student', 'teacher', 'management') NOT NULL,
    name VARCHAR(100) NOT NULL
);

CREATE TABLE students (
    student_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    email VARCHAR(100) NOT NULL,
    phone_number VARCHAR(15),
    course VARCHAR(100),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE teachers (
    teacher_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    department VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(15),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE management (
    management_id INT AUTO_INCREMENT PRIMARY KEY,
    user_id INT NOT NULL,
    position VARCHAR(100),
    email VARCHAR(100),
    phone_number VARCHAR(15),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

CREATE TABLE classes (
    class_id INT AUTO_INCREMENT PRIMARY KEY,
    teacher_id INT NOT NULL,
    class_name VARCHAR(100),
    start_time DATETIME,
    qr_code_location VARCHAR(255),
    FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id) ON DELETE CASCADE
);

CREATE TABLE attendance (
    attendance_id INT AUTO_INCREMENT PRIMARY KEY,
    student_id INT NOT NULL,
    class_id INT NOT NULL,
    attendance_time DATETIME,
    student_location VARCHAR(255),
    is_present BOOLEAN,
    FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE
);

CREATE TABLE assignments (
    assignment_id INT AUTO_INCREMENT PRIMARY KEY,
    class_id INT NOT NULL,
    student_id INT NOT NULL,
    submission_date DATETIME,
    file_path VARCHAR(255),
    grade FLOAT DEFAULT NULL,
    FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE,
    FOREIGN KEY (student_id) REFERENCES students(student_id) ON DELETE CASCADE
);

CREATE TABLE lecture_materials (
    material_id INT AUTO_INCREMENT PRIMARY KEY,
    class_id INT NOT NULL,
    teacher_id INT NOT NULL,
    upload_date DATETIME,
    file_path VARCHAR(255),
    FOREIGN KEY (class_id) REFERENCES classes(class_id) ON DELETE CASCADE,
    FOREIGN KEY (teacher_id) REFERENCES teachers(teacher_id) ON DELETE CASCADE
);

CREATE VIEW attendance_analysis AS
SELECT 
    s.student_id,
    s.course,
    c.class_name,
    COUNT(a.attendance_id) AS total_classes,
    SUM(CASE WHEN a.is_present = 1 THEN 1 ELSE 0 END) AS attended_classes,
    (SUM(CASE WHEN a.is_present = 1 THEN 1 ELSE 0 END) / COUNT(a.attendance_id)) * 100 AS attendance_percentage
FROM students s
JOIN attendance a ON s.student_id = a.student_id
JOIN classes c ON a.class_id = c.class_id
GROUP BY s.student_id, c.class_name;

CREATE VIEW assignment_analysis AS
SELECT 
    s.student_id,
    s.course,
    c.class_name,
    a.grade
FROM students s
JOIN assignments a ON s.student_id = a.student_id
JOIN classes c ON a.class_id = c.class_id;

